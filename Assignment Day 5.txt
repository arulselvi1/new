Do the below programs in anonymous function & IIFE
Print odd numbers in an array

solution :

let arr  = [1,2,3,4,5];

 (function(a){
    
    let result=[]
    for(i=0;i<a.length;i++)
    {
        
       if(a[i]%2!=0)result.push(arr[i])
    }
    console.log('By iife function: ',result);
  })(arr)


  
let anonymous = function (a){
  let result=[]
    for(i=0;i<a.length;i++)
    {
        
        if(a[i]%2!=0)result.push(arr[i])
           
        
    }
    return result
}
console.log('By anonymous function: ',anonymous(arr))
-----------------------------------------------------------------------------------------------------------
Convert all the strings to title caps in a string array

solution:
let str  = ['guvi','mohan','web','developer'];
  

  (function(s){
      
     for(var i = 0; i<s.length; i++){
      s[i] = s[i][0].toUpperCase() + s[i].slice(1);
      }
  console.log('By iife function: ',s) 
    })(str)



let anonymous = function (s){
  
    for(var i = 0; i<s.length; i++){
      s[i] = s[i][0].toUpperCase() + s[i].slice(1);
  }
  console.log('By anonymous function: ',s)

}
anonymous(str)
--------------------------------------------------------------------------------------------
Sum of all numbers in an array

solution :

let arr  = [1,2,3,4,5];
(function(a){
    
     let result = a.reduce((total,num)=>{
       return total+num
     })
      console.log('By iife function: '+result);
  })(arr)


  
let anonymous = function (a){
  let result = a.reduce((total,num)=>{
    return total+num
  })
  return result
}
console.log('By anonymous function: '+anonymous(arr))
--------------------------------------------------------------------------------------
Return all the prime numbers in an array
solution:

var numArray = [2, 3, 4, 5, 6, 7, 8, 9, 10]


 var iife=(function(number){
      return  number.filter((num) => {
            
            for (var i = 2; i <= Math.sqrt(num); i++) {
            if (num % i === 0) return false;
            }
            return true;
            
      });
  })(numArray)

  console.log('By iife function: ',iife) 

  
let anonymous = function (number){
     
        return  number.filter((num) => {
      
        for (var i = 2; i <= Math.sqrt(num); i++) {
        if (num % i === 0) return false;
        }
        return true;
      });
  
}
console.log('By anonymous function: ',anonymous(numArray))
----------------------------------------------------------------------------------------------------
Return all the palindromes in an array
solution:

let palindrome =['madam','guvi','level']

let iife= (function(p){
  return  p.filter((element)=>element==element.split("").reverse().join(""))
  })(palindrome)

  
console.log('By iife function: ',iife)



let anonymous = function (p){

  return  p.filter((element)=>element==element.split("").reverse().join(""))

}
console.log('By anonymous function: ',anonymous(palindrome))
-----------------------------------------------------------------------------------------------------------
Return median of two sorted arrays of same size
solution:

let arr1 = [1, 12, 15, 26, 38]
let arr2 = [2, 13, 17, 30, 45]

 let iife= (function(a1,a2){
  
    if(a1.length != a2.length) return 'both array length is not same'
    let arr = a1.concat(a2).sort((a,b)=>(a-b));
    let mid = Math.floor(arr.length / 2);
    return (arr[mid] + arr[mid - 1]) / 2;  
  })(arr1,arr2)

  
console.log('By iife function: '+iife) 



let anonymous = function (a1,a2){

  
  if(a1.length != a2.length) return 'both array length is not same'
  let arr = a1.concat(a2).sort((a,b)=>(a-b));
  let mid = Math.floor(arr.length / 2);
  return (arr[mid] + arr[mid - 1]) / 2;
  
}
console.log('By anonymous function: '+anonymous(arr1,arr2))
--------------------------------------------------------------------------------------------------------------
Remove duplicates from an array
solution:

let arr =[10,20,50,35,40,35,50]

let iife= (function(a){
  let uniquearray =[]

   a.filter((element)=>{
     if(uniquearray.indexOf(element)==-1) uniquearray.push(element)
    })
    return uniquearray
  })(arr)

  
console.log('By iife function: ',iife)



let anonymous = function (a){

  let uniquearray =[]

   a.filter((element)=>{
     if(uniquearray.indexOf(element)==-1) uniquearray.push(element)
    })
    return uniquearray
}
console.log('By anonymous function: ',anonymous(arr))
-----------------------------------------------------------------------------------------------
Rotate an array by k times
solution:

let arr =[1,2,3,8,9,10]
let k=3
let iife= (function(a,k){
  a=[...a]
  for(i=0;i<k;i++)
  {
     let val = a.splice(-1)
     a.splice(0,0,val[0])
  } 
  return a
  })(arr,k)

  
console.log('By iife function: ',iife)



let anonymous = function (a,k){

  for(i=0;i<k;i++)
  {
     let val = a.splice(-1)
     a.splice(0,0,val[0])
  } 
  return a

}
console.log('By anonymous function: ',anonymous(arr,k))
---------------------------------------------------------------------------------------------------------
Do the below programs in arrow functions
Print odd numbers in an array
solution:

let arr = [1,2,3,4,5,6,7,8,9,10,11,12]

let odds = arr.filter(n => n%2)

console.log(odds)
-------------------------------------------------------------------------------------
Convert all the strings to title caps in a string array
solution:

const names = ['Ali', 'Atta', 'Alex', 'John'];
const uppercased = names.map(name => name.toUpperCase());
console.log(uppercased);
------------------------------------------------------------------------------------------
Sum of all numbers in an array
solution:

const array1 = [1, 2, 3, 4];
const reducer = (previousValue, currentValue) => previousValue + currentValue;

// 1 + 2 + 3 + 4
console.log(array1.reduce(reducer));
// expected output: 10

// 5 + 1 + 2 + 3 + 4
console.log(array1.reduce(reducer, 5));
// expected output: 15
----------------------------------------------------------------------
Return all the prime numbers in an array
solution :

const newArray = [1, 3, 2, 5, 10];
const isPrime = num => {
  for (let i = 2; i < num; i++) {
    if (num % i === 0) return false;
  }
  return num !== 1;
};
const myPrimeArray = newArray.filter(element => isPrime(element));
console.log(myPrimeArray);
--------------------------------------------------------------------------------
Return all the palindromes in an array
solution:

const isPalindrome = str => str === str.split('').reverse().join('');

// Examples
console.log(isPalindrome('abc'));        // false
console.log(isPalindrome('abcba'));       // true
--------------------------------------------------------------------------------
https://medium.com/@reach2arunprakash/guvi-zen-class-javascript-warm-up-programming-problems-15973c74b87f
1)Write a function called “addFive”.
Given a number, “addFive” returns 5 added to that number.

Input:
addFive(5);
addFive(0);
addFive(-5);
Output:
10
5
0

solution:
function addFive(num) { 
num = num+5;

return num;
}
console.log(addFive(5));
console.log(addFive(0));
console.log(addFive(-5));
----------------------------------------------------
Problem:
Write a function called “getOpposite”.
Given a number, return its opposite
Input:
getOpposite(5);
getOpposite(0);
getOpposite(-5);
getOpposite(“5a”);
getOpposite(5.5);
Output:
-5
0
5
-1
-1

solution:


function getOpposite(number) {
  let result;
  if (!isNaN(Math.sign(number))) {
      result = number * (-1);
  }
  if(isNaN(Math.sign(number))){
    result = "-1";
  }
  if(number==0){
    return 0;
  }

  return result;
}
console.log(getOpposite(5));
console.log(getOpposite(0));
console.log(getOpposite(-5));
console.log(getOpposite("5a"));
console.log(getOpposite(5.5));
-------------------------------------------------------------------------------
